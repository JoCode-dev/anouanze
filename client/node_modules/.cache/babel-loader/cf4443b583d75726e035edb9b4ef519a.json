{"ast":null,"code":"export default function getTotalWidthsMetadata(params) {\n  var columns = params.columns,\n      minColumnWidth = params.minColumnWidth,\n      maxColumnWidth = params.maxColumnWidth;\n  var initial = {\n    totalFixedWidth: 0,\n    totalFixedColumns: 0,\n    totalResizedWidth: 0,\n    totalResizedColumns: 0,\n    totalFlexibleColumns: 0,\n    minColumnWidth: minColumnWidth,\n    maxColumnWidth: maxColumnWidth\n  };\n  return columns.reduce(function (prev, col, index) {\n    var currentColumn = columns[index];\n\n    if (col.width) {\n      prev.totalFixedWidth += col.width;\n      prev.totalFixedColumns += 1;\n    } else if (currentColumn.isResized) {\n      prev.totalResizedWidth += currentColumn.computedWidth;\n      prev.totalResizedColumns += 1;\n    } else if (col.defaultWidth) {\n      prev.totalResizedWidth += col.defaultWidth;\n      prev.totalResizedColumns += 1;\n    } else {\n      prev.totalFlexibleColumns += 1;\n    }\n\n    return prev;\n  }, initial);\n}","map":{"version":3,"names":["getTotalWidthsMetadata","params","columns","minColumnWidth","maxColumnWidth","initial","totalFixedWidth","totalFixedColumns","totalResizedWidth","totalResizedColumns","totalFlexibleColumns","reduce","prev","col","index","currentColumn","width","isResized","computedWidth","defaultWidth"],"sources":["/Users/jocode/Documents/GitHub/anouanze/client/node_modules/react-rainbow-components/esm/components/Table/helpers/resizer/getTotalWidthsMetadata.js"],"sourcesContent":["export default function getTotalWidthsMetadata(params) {\n  var columns = params.columns,\n      minColumnWidth = params.minColumnWidth,\n      maxColumnWidth = params.maxColumnWidth;\n  var initial = {\n    totalFixedWidth: 0,\n    totalFixedColumns: 0,\n    totalResizedWidth: 0,\n    totalResizedColumns: 0,\n    totalFlexibleColumns: 0,\n    minColumnWidth: minColumnWidth,\n    maxColumnWidth: maxColumnWidth\n  };\n  return columns.reduce(function (prev, col, index) {\n    var currentColumn = columns[index];\n\n    if (col.width) {\n      prev.totalFixedWidth += col.width;\n      prev.totalFixedColumns += 1;\n    } else if (currentColumn.isResized) {\n      prev.totalResizedWidth += currentColumn.computedWidth;\n      prev.totalResizedColumns += 1;\n    } else if (col.defaultWidth) {\n      prev.totalResizedWidth += col.defaultWidth;\n      prev.totalResizedColumns += 1;\n    } else {\n      prev.totalFlexibleColumns += 1;\n    }\n\n    return prev;\n  }, initial);\n}"],"mappings":"AAAA,eAAe,SAASA,sBAAT,CAAgCC,MAAhC,EAAwC;EACrD,IAAIC,OAAO,GAAGD,MAAM,CAACC,OAArB;EAAA,IACIC,cAAc,GAAGF,MAAM,CAACE,cAD5B;EAAA,IAEIC,cAAc,GAAGH,MAAM,CAACG,cAF5B;EAGA,IAAIC,OAAO,GAAG;IACZC,eAAe,EAAE,CADL;IAEZC,iBAAiB,EAAE,CAFP;IAGZC,iBAAiB,EAAE,CAHP;IAIZC,mBAAmB,EAAE,CAJT;IAKZC,oBAAoB,EAAE,CALV;IAMZP,cAAc,EAAEA,cANJ;IAOZC,cAAc,EAAEA;EAPJ,CAAd;EASA,OAAOF,OAAO,CAACS,MAAR,CAAe,UAAUC,IAAV,EAAgBC,GAAhB,EAAqBC,KAArB,EAA4B;IAChD,IAAIC,aAAa,GAAGb,OAAO,CAACY,KAAD,CAA3B;;IAEA,IAAID,GAAG,CAACG,KAAR,EAAe;MACbJ,IAAI,CAACN,eAAL,IAAwBO,GAAG,CAACG,KAA5B;MACAJ,IAAI,CAACL,iBAAL,IAA0B,CAA1B;IACD,CAHD,MAGO,IAAIQ,aAAa,CAACE,SAAlB,EAA6B;MAClCL,IAAI,CAACJ,iBAAL,IAA0BO,aAAa,CAACG,aAAxC;MACAN,IAAI,CAACH,mBAAL,IAA4B,CAA5B;IACD,CAHM,MAGA,IAAII,GAAG,CAACM,YAAR,EAAsB;MAC3BP,IAAI,CAACJ,iBAAL,IAA0BK,GAAG,CAACM,YAA9B;MACAP,IAAI,CAACH,mBAAL,IAA4B,CAA5B;IACD,CAHM,MAGA;MACLG,IAAI,CAACF,oBAAL,IAA6B,CAA7B;IACD;;IAED,OAAOE,IAAP;EACD,CAjBM,EAiBJP,OAjBI,CAAP;AAkBD"},"metadata":{},"sourceType":"module"}