{"ast":null,"code":"import { useMemo } from 'react';\nexport default function useFocusedIndexState(value, length, disabled, readOnly) {\n  return useMemo(function () {\n    var canBeFocused = !disabled && !readOnly;\n\n    if (canBeFocused) {\n      var currentLength = value.join('').trim('').length;\n      var newFocusedIndex = currentLength < length ? currentLength : length - 1;\n      return newFocusedIndex;\n    }\n\n    return undefined;\n  }, [value, length, disabled, readOnly]);\n}","map":{"version":3,"names":["useMemo","useFocusedIndexState","value","length","disabled","readOnly","canBeFocused","currentLength","join","trim","newFocusedIndex","undefined"],"sources":["/Users/jocode/Documents/GitHub/anouanze/client/node_modules/react-rainbow-components/esm/components/CodeInput/hooks/useFocusedIndexState.js"],"sourcesContent":["import { useMemo } from 'react';\nexport default function useFocusedIndexState(value, length, disabled, readOnly) {\n  return useMemo(function () {\n    var canBeFocused = !disabled && !readOnly;\n\n    if (canBeFocused) {\n      var currentLength = value.join('').trim('').length;\n      var newFocusedIndex = currentLength < length ? currentLength : length - 1;\n      return newFocusedIndex;\n    }\n\n    return undefined;\n  }, [value, length, disabled, readOnly]);\n}"],"mappings":"AAAA,SAASA,OAAT,QAAwB,OAAxB;AACA,eAAe,SAASC,oBAAT,CAA8BC,KAA9B,EAAqCC,MAArC,EAA6CC,QAA7C,EAAuDC,QAAvD,EAAiE;EAC9E,OAAOL,OAAO,CAAC,YAAY;IACzB,IAAIM,YAAY,GAAG,CAACF,QAAD,IAAa,CAACC,QAAjC;;IAEA,IAAIC,YAAJ,EAAkB;MAChB,IAAIC,aAAa,GAAGL,KAAK,CAACM,IAAN,CAAW,EAAX,EAAeC,IAAf,CAAoB,EAApB,EAAwBN,MAA5C;MACA,IAAIO,eAAe,GAAGH,aAAa,GAAGJ,MAAhB,GAAyBI,aAAzB,GAAyCJ,MAAM,GAAG,CAAxE;MACA,OAAOO,eAAP;IACD;;IAED,OAAOC,SAAP;EACD,CAVa,EAUX,CAACT,KAAD,EAAQC,MAAR,EAAgBC,QAAhB,EAA0BC,QAA1B,CAVW,CAAd;AAWD"},"metadata":{},"sourceType":"module"}