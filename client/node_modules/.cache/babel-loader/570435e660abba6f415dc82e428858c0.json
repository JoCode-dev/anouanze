{"ast":null,"code":"import getFormattedEventTime from './getFormattedEventTime';\n\nvar formatter = function formatter(locale) {\n  return new Intl.DateTimeFormat(locale, {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n};\n\nexport default function getFormattedEventTimeRange(startDate, endDate, locale) {\n  var startDateParts = formatter(locale).formatToParts(startDate);\n  var endDateParts = formatter(locale).formatToParts(endDate);\n  var formattedStartDate = getFormattedEventTime(startDateParts.filter(function (_ref, index, arr) {\n    var type = _ref.type,\n        value = _ref.value;\n\n    if (type.toLowerCase() === 'dayperiod' && value === endDateParts[index].value) {\n      return false;\n    }\n\n    var next = arr[index + 1];\n\n    if (next && next.type.toLowerCase() === 'dayperiod' && next.value === endDateParts[index + 1].value) {\n      return false;\n    }\n\n    return true;\n  }));\n  var formattedEndDate = getFormattedEventTime(endDateParts);\n  return \"\".concat(formattedStartDate, \" - \").concat(formattedEndDate);\n}","map":{"version":3,"names":["getFormattedEventTime","formatter","locale","Intl","DateTimeFormat","hour","minute","hour12","getFormattedEventTimeRange","startDate","endDate","startDateParts","formatToParts","endDateParts","formattedStartDate","filter","_ref","index","arr","type","value","toLowerCase","next","formattedEndDate","concat"],"sources":["/Users/jocode/Documents/GitHub/anouanze/client/node_modules/react-rainbow-components/esm/components/WeeklyCalendar/week/helpers/getFormattedEventTimeRange.js"],"sourcesContent":["import getFormattedEventTime from './getFormattedEventTime';\n\nvar formatter = function formatter(locale) {\n  return new Intl.DateTimeFormat(locale, {\n    hour: 'numeric',\n    minute: 'numeric',\n    hour12: true\n  });\n};\n\nexport default function getFormattedEventTimeRange(startDate, endDate, locale) {\n  var startDateParts = formatter(locale).formatToParts(startDate);\n  var endDateParts = formatter(locale).formatToParts(endDate);\n  var formattedStartDate = getFormattedEventTime(startDateParts.filter(function (_ref, index, arr) {\n    var type = _ref.type,\n        value = _ref.value;\n\n    if (type.toLowerCase() === 'dayperiod' && value === endDateParts[index].value) {\n      return false;\n    }\n\n    var next = arr[index + 1];\n\n    if (next && next.type.toLowerCase() === 'dayperiod' && next.value === endDateParts[index + 1].value) {\n      return false;\n    }\n\n    return true;\n  }));\n  var formattedEndDate = getFormattedEventTime(endDateParts);\n  return \"\".concat(formattedStartDate, \" - \").concat(formattedEndDate);\n}"],"mappings":"AAAA,OAAOA,qBAAP,MAAkC,yBAAlC;;AAEA,IAAIC,SAAS,GAAG,SAASA,SAAT,CAAmBC,MAAnB,EAA2B;EACzC,OAAO,IAAIC,IAAI,CAACC,cAAT,CAAwBF,MAAxB,EAAgC;IACrCG,IAAI,EAAE,SAD+B;IAErCC,MAAM,EAAE,SAF6B;IAGrCC,MAAM,EAAE;EAH6B,CAAhC,CAAP;AAKD,CAND;;AAQA,eAAe,SAASC,0BAAT,CAAoCC,SAApC,EAA+CC,OAA/C,EAAwDR,MAAxD,EAAgE;EAC7E,IAAIS,cAAc,GAAGV,SAAS,CAACC,MAAD,CAAT,CAAkBU,aAAlB,CAAgCH,SAAhC,CAArB;EACA,IAAII,YAAY,GAAGZ,SAAS,CAACC,MAAD,CAAT,CAAkBU,aAAlB,CAAgCF,OAAhC,CAAnB;EACA,IAAII,kBAAkB,GAAGd,qBAAqB,CAACW,cAAc,CAACI,MAAf,CAAsB,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,GAAvB,EAA4B;IAC/F,IAAIC,IAAI,GAAGH,IAAI,CAACG,IAAhB;IAAA,IACIC,KAAK,GAAGJ,IAAI,CAACI,KADjB;;IAGA,IAAID,IAAI,CAACE,WAAL,OAAuB,WAAvB,IAAsCD,KAAK,KAAKP,YAAY,CAACI,KAAD,CAAZ,CAAoBG,KAAxE,EAA+E;MAC7E,OAAO,KAAP;IACD;;IAED,IAAIE,IAAI,GAAGJ,GAAG,CAACD,KAAK,GAAG,CAAT,CAAd;;IAEA,IAAIK,IAAI,IAAIA,IAAI,CAACH,IAAL,CAAUE,WAAV,OAA4B,WAApC,IAAmDC,IAAI,CAACF,KAAL,KAAeP,YAAY,CAACI,KAAK,GAAG,CAAT,CAAZ,CAAwBG,KAA9F,EAAqG;MACnG,OAAO,KAAP;IACD;;IAED,OAAO,IAAP;EACD,CAf8C,CAAD,CAA9C;EAgBA,IAAIG,gBAAgB,GAAGvB,qBAAqB,CAACa,YAAD,CAA5C;EACA,OAAO,GAAGW,MAAH,CAAUV,kBAAV,EAA8B,KAA9B,EAAqCU,MAArC,CAA4CD,gBAA5C,CAAP;AACD"},"metadata":{},"sourceType":"module"}